# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './pythonGUI/TranQR.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import qrcode#导入qrcode库, 用于生成二维码
import datetime#导入datetime库用于生成带时间的图片名
import os,getpass#导入getpass库用于获取系统的用户名
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_TranQR(QtWidgets.QMainWindow):
    # 为了使类继承父类中的内容
    def __init__(self):
        super(Ui_TranQR,self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)
    ###########
    def setupUi(self, TranQR):
        TranQR.setObjectName("TranQR")
        TranQR.setEnabled(True)
        TranQR.resize(799, 600)
        self.centralwidget = QtWidgets.QWidget(TranQR)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(350, 250, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setGeometry(QtCore.QRect(220, 80, 541, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setEnabled(True)
        self.lineEdit_2.setGeometry(QtCore.QRect(220, 160, 541, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(40, 60, 167, 151))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        TranQR.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(TranQR)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 799, 26))
        self.menubar.setObjectName("menubar")
        TranQR.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(TranQR)
        self.statusbar.setObjectName("statusbar")
        TranQR.setStatusBar(self.statusbar)

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.setGeometry(QtCore.QRect(400,250, 200, 30))
        self.label_3.setObjectName("label_3")
     
        
        self.pushButton.clicked.connect(self.tranQR)


        self.retranslateUi(TranQR)
        QtCore.QMetaObject.connectSlotsByName(TranQR)

    def retranslateUi(self, TranQR):
        _translate = QtCore.QCoreApplication.translate
        TranQR.setWindowTitle(_translate("TranQR", "MainWindow"))
        self.pushButton.setText(_translate("TranQR", "转换"))
        self.label.setText(_translate("TranQR", "输入待转换的字符串"))
        self.label_2.setText(_translate("TranQR", "输入生成图片的存储路径"))

    # 功能函数
    def tranQR(self):
        #输入待转换的字符串
        # self.label_3.input("Enter the string to be converted:")
        self.label_3.setText("Input:"+self.lineEdit.text())
        #采用默认方式生成二维码
        img = qrcode.make(str)
        #获取当前时间,转化成字符串
        timenow = datetime.datetime.now()
        timestr = timenow.strftime("%Y-%m-%d-%H-%M-%S")
        #生成带时间的二维码图片名,图片保存在桌面上
        name = "{0}\\{1}.png".format(self.lineEdit_2.text(), timestr)
        self.lineEdit_2.setText("Save as :"+ name)
        #保存二维码图片
        img.save(name)
        self.label_3.setText("Success!")
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    TranQR = QtWidgets.QMainWindow()
    ui = Ui_TranQR()
    ui.setupUi(TranQR)
    TranQR.show()
    sys.exit(app.exec_())
